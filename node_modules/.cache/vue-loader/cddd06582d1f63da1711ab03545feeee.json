{"remainingRequest":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/js-air-01/Documents/Dilip-Project/JJ-Active/src/views/Detail.vue?vue&type=template&id=25fb93e9&scoped=true&","dependencies":[{"path":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/src/views/Detail.vue","mtime":1659696474000},{"path":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/node_modules/cache-loader/dist/cjs.js","mtime":1660658985323},{"path":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660658979148},{"path":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/node_modules/cache-loader/dist/cjs.js","mtime":1660658985323},{"path":"/Users/js-air-01/Documents/Dilip-Project/JJ-Active/node_modules/vue-loader/lib/index.js","mtime":1660658977353}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}